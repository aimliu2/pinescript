// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © TheAimLiu
// @version=5
// -----------------------------------------------------------------------------
//                                  Constant                                    
// -----------------------------------------------------------------------------

indicator(shorttitle = "XMA.B", title="xMA band", overlay=true)
// period
p = 24

var BULLSIH_COLOR = #B2B5BE // gray
CLEAR_COLOR = color.new(color.white,100)
GREEN_COLOR = color.rgb(14, 131, 136) // green
PURPLE_COLOR = color.rgb(143, 67, 238) // purple
GOLD_COLOR = color.rgb(181, 148, 16) // gold
BLUE_COLOR = color.rgb(83, 127, 231) // blue
ORANGE_COLOR = color.new(color.orange, 50)

epsilon = syminfo.mintick
this_tf = timeframe.period
this_ticker = syminfo.tickerid

// -----------------------------------------------------------------------------
//                                    Input                                     
// -----------------------------------------------------------------------------
src = input.source(close, title='Source Data')
p_length = input.int(p, title="xma period.")
showcross = input.bool(true, title="Show cross over/under ema")

is_lock = input.bool(false, title="lock indicator TF")
lock_tf = input.timeframe('240', "TF", options=['60','240','D', 'W'])

// -----------------------------------------------------------------------------
//                                  Functions                                   
// -----------------------------------------------------------------------------
beta = 1

// Degree 1, First order - Hull MA
MAg(s, l)=>
    n1 = 1+beta
    n0 = beta
    _l = l/1
    k = math.round(math.sqrt(p_length))
    ta.wma(n1 * ta.wma(s, _l/n1) - (n0 * ta.wma(s, _l/n0)),k)
        

// Degree 2, Second order
MAg2(s, l)=>
    n2 = 2+beta
    n1 = 1+beta
    n0 = beta
    _l = l/2 // (divide by degree)
    k = math.round(math.sqrt(p_length)*2)
    ta.wma(n2 * ta.wma(s, _l/n2) - (ta.wma(s, _l/n1) + ta.wma(s, _l/n0)),k)

auto_color(str_tf)=>
    _5m = 300
    _15m = 900
    _1h = 3600  
    _4h = 14400
    _1d = 86400
    _1w = 604800
    this_tf_second = timeframe.in_seconds(str_tf)
    if this_tf_second <= _5m
        color.fuchsia
    else if this_tf_second <= _15m
        color.red
    else if this_tf_second <= _1h
        GREEN_COLOR
    else if this_tf_second <= _4h
        PURPLE_COLOR
    else if this_tf_second <= _1d
        GOLD_COLOR
    else 
        BLUE_COLOR //blue_color

fetch_tf(_sym, _res, _src) => 
    request.security(_sym, _res, _src, lookahead = barmerge.lookahead_on)
// -----------------------------------------------------------------------------
//                                Calculations                                  
// -----------------------------------------------------------------------------

deg1_ma = is_lock ? fetch_tf(this_ticker,lock_tf,MAg(src, p_length)) : MAg(src, p_length)
deg2_ma = is_lock ? fetch_tf(this_ticker,lock_tf,MAg2(src, p_length)) : MAg2(src, p_length)

bull_color = color.new(BULLSIH_COLOR, 50)
bear_color = is_lock ? color.new(auto_color(lock_tf),50) : color.new(auto_color(this_tf),50)

macd_color = deg2_ma > deg1_ma ? bull_color : bear_color

// -----------------------------------------------------------------------------
//                                    Plot                                      
// -----------------------------------------------------------------------------
p1 = plot(deg1_ma,color=macd_color,linewidth=1)
p2 = plot(deg2_ma,color=macd_color,linewidth=1)

// -----------------------------------------------------------------------------
//                                 Color fill                                   
// -----------------------------------------------------------------------------
fill(p1,p2,color=macd_color)

// -----------------------------------------------------------------------------
//                                   Symbol                                     
// -----------------------------------------------------------------------------

crossdn = ta.crossover(deg1_ma,deg2_ma)
crossup = ta.crossunder(deg1_ma,deg2_ma)

plotshape(showcross and crossdn ? deg2_ma : na, location=location.absolute, style=shape.labeldown, color=macd_color, size=size.tiny, text="↓", textcolor=color.white, offset=-1)
plotshape(showcross and crossup ? deg2_ma : na, location=location.absolute, style=shape.labelup, color=macd_color, size=size.tiny, text="↑", textcolor=color.white, offset=-1)