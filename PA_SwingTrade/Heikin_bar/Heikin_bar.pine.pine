// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © TheAimLiu2
// @version=5

// Sections
// 0 Constants
// 1 Inputs
// 2 Functions
// 3 Calculation
// 4 Color Conditions
// 5 Plot
// 6 Debug/label

// -----------------------------------------------------------------------------
//                                 0 Constant                                   
// -----------------------------------------------------------------------------
PRECISION_LIMIT = 4 // significant numbers

this_tf = timeframe.period
this_ticker = syminfo.tickerid
this_tz = syminfo.timezone

// ------------------------------ divider color --------------------------------
var m_divider_color = #434651 // charcoal black
var w_divider_color = #2962ff // blue

// ------------------------------ candle colors --------------------------------
var gold_color =#b59410
// var hikin_bear_color = #801922 // dark red

var bullish_color = #b2b5be
var bearish_color = m_divider_color

indicator("Heikin Aishi bars power 2024", shorttitle= "HK bars 2024", overlay=false,precision=PRECISION_LIMIT)
// -----------------------------------------------------------------------------
//                                  1 inputs                                    
// -----------------------------------------------------------------------------

g1 = "Candle hightlight color"
tip12 = 'Auto bearish color'
bull_color = input.color(bullish_color, title="Bull", group=g1, inline='l1g1')
bear_color = input.color(bearish_color, title="Bear", group=g1, inline='l1g1')
show_label = input.bool(true,title="Show Label", group=g1, inline='l2g1')
auto_bear_color = input.bool(true,title="Overide Bearish Color", group=g1, inline='l2g1', tooltip=tip12)

g2 = "Show higher timeframe"
tip21 = "Higher timeframe i.e. 1D"
show_htf = input.bool(true, title="show HTF", group=g2)
htf_select = input.timeframe('240', "HTF", options=['60','240','D', 'W'], tooltip=tip21, group=g2)
// -----------------------------------------------------------------------------
//                                 2 Functions                                  
// -----------------------------------------------------------------------------
// --------------------------- fetch data from tf ------------------------------
fetch_tf(_sym, _res, _src) => 
    request.security(_sym, _res, _src, lookahead = barmerge.lookahead_on)

// --------------------------- Hikin Aishi Candles -----------------------------
hk(_src)  => 
    hk_c = ohlc4 // hk_close
    hk_o = float(na)
    hk_o := na(hk_o[1]) ? (open + close) / 2 : (nz(hk_o[1]) + nz(hk_c[1])) / 2 // open
    hk_h = math.max(high, math.max(hk_o, hk_c)) // high
    hk_l = math.min(low,  math.min(hk_o, hk_c)) // low
    hk_hl2  = math.avg(hk_h, hk_l) 
    hk_hlc3 = math.avg(hk_h, hk_l, hk_c) 
    hk_ohlc4 = math.avg(hk_o, hk_h, hk_l, hk_c)
    hk_price  = _src == 'close' ? hk_c : _src == 'open' ? hk_o : _src == 'high' ? hk_h : _src == 'low' ? hk_l : _src == 'hl2' ? hk_hl2 : _src == 'hlc3' ? hk_hlc3 : hk_ohlc4  
    math.round(hk_price / syminfo.mintick) * syminfo.mintick  // PineCoders method for aligning Pine prices with chart instrument prices    

// ------------------------------- auto colors ---------------------------------
auto_period_bear_color(str_tf)=>
    _15m = 900
    _1h = 3600  
    _4h = 14400
    _1d = 86400
    _1w = 604800
    this_tf_second = timeframe.in_seconds(str_tf)
    if this_tf_second <= _15m
        color.red
    else if this_tf_second <= _1h
        #66bb6a // lite lime
    else if this_tf_second <= _4h
        color.fuchsia
    else if this_tf_second <= _1d
        color.new(gold_color,0)
    else 
        color.blue

// -----------------------------------------------------------------------------
//                                3 Calculation                                 
// -----------------------------------------------------------------------------
// ------------------------------- current tf ----------------------------------
is_hikin_bull = hk('open') < hk('close') // bool

// -------------------------------- select tf ----------------------------------
htf_hikin_open = fetch_tf(this_ticker, htf_select, hk('open'))
htf_hikin_close = fetch_tf(this_ticker, htf_select, hk('close')) 
is_htf_hikin_bull = htf_hikin_open < htf_hikin_close // bool

// -----------------------------------------------------------------------------
//                             4 Color Conditions                               
// -----------------------------------------------------------------------------
berish_bar_color = auto_bear_color ? auto_period_bear_color(this_tf) : bear_color
berish_bar_htf_color = auto_bear_color ? auto_period_bear_color(htf_select) : bear_color

// -------------------- generate body, wick, border color ----------------------
body_color = is_hikin_bull ? bull_color : berish_bar_color
body_htf_color = is_htf_hikin_bull ? bull_color : berish_bar_htf_color

bar_color =  barstate.islast ? color.orange : body_color
bar_htf_color =  barstate.islast ? color.orange : body_htf_color
// -----------------------------------------------------------------------------
//                                   5 plot                                     
// -----------------------------------------------------------------------------
var a=1.0
var b=-1.0

// plot Heikin Bars
plot(a,title='Heikin Aishi status',style=plot.style_columns, linewidth=8, color=bar_color, histbase=0)
plot(show_htf ? b : na,title='Heikin Aishi HTF status',style=plot.style_columns, linewidth=8, color=bar_htf_color, histbase=0)

// -----------------------------------------------------------------------------
//                              6 Debug Section                                 
// -----------------------------------------------------------------------------
// display status On the chart's last bar
if barstate.islast and show_label

    label_msg = "HK : " + str.tostring(this_tf)
    myLabel1 = label.new(x=bar_index + 1, y=a/2, color=body_color, style=label.style_label_left, size=size.tiny)

    label_htf_msg = "HK : " + str.tostring(htf_select)
    myLabel2 = label.new(x=bar_index + 1, y=b/2, color=body_htf_color, style=label.style_label_left, size=size.tiny)

    label.set_text(id=myLabel1, text=label_msg)
    label.set_text(id=myLabel2, text=label_htf_msg)