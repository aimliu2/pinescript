// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © TheAimLiu2
// @version=5

// Sections
// 0 Constants
// 1 Inputs
// 2 Functions
// 3 Calculation
// 4 Color Conditions
// 5 Plot
// 6 Debug/label

// -----------------------------------------------------------------------------
//                                 0 Constant                                   
// -----------------------------------------------------------------------------
PRECISION_LIMIT = 4 // significant numbers

this_tf = timeframe.period
this_ticker = syminfo.tickerid
this_tz = syminfo.timezone

// ----------------------------- Pre-processing --------------------------------
arr = str.split(this_ticker, ":") 
this_sym = array.get(arr, 1) // series

// ------------------------------ candle colors --------------------------------
var gold_color =#b59410
var bullish_color = #b2b5be
var bearish_color = #434651 // charcoal black

indicator("Heikin Aishi Trace bars 2024", shorttitle= "HKT bars 2024", overlay=false,precision=PRECISION_LIMIT)
// -----------------------------------------------------------------------------
//                                  1 inputs                                    
// -----------------------------------------------------------------------------

g1 = "Candle hightlight color"
tip12 = 'Auto bearish color'
bull_color = input.color(bullish_color, title="Bull", group=g1, inline='l1g1')
bear_color = input.color(bearish_color, title="Bear", group=g1, inline='l1g1')
show_label = input.bool(true,title="Show Label", group=g1, inline='l2g1')
auto_bear_color = input.bool(true,title="Overide Bearish Color", group=g1, inline='l2g1', tooltip=tip12)

g2 = "Show higher timeframe"
tip21 = "Higher timeframe i.e. 1D"
show_htf = input.bool(true, title="show HTF", group=g2)
htf_select = input.timeframe('240', "HTF", options=['60','240','480','D', 'W'], tooltip=tip21, group=g2)

g3 = "Auto tracing timeframe"
group1 = "AUDUSD, GBPUSD, EURUSD"
group2 = "XAUUSD, USOUSD, GBPAUD, EURAUD"
group3 = "SPX500, NDQ100"
auto_trace = input.bool(true, title="Auto tracing timeframe", group=g3)
g_15m1h = input.string(group1, "15m1h",group=g3)
g_1h4h = input.string(group2, "1h4h",group=g3)
g_3h12h = input.string(group3, "2h8h",group=g3)

// ----------------------------- Post-processing -------------------------------
// see if current symbol belongs to which group
// series bool
bool is_g1 = str.contains(g_15m1h, this_sym)
bool is_g2 = str.contains(g_1h4h, this_sym)
bool is_g3 = str.contains(g_3h12h, this_sym)

// -----------------------------------------------------------------------------
//                                 2 Functions                                  
// -----------------------------------------------------------------------------
// --------------------------- fetch data from tf ------------------------------
// fetch data from selected tf
fetch_tf(_sym, _res, _src) => 
    request.security(_sym, _res, _src, lookahead = barmerge.lookahead_on)

// --------------------------- Hikin Aishi Candles -----------------------------
// fetch HK candles from ohlc on the tf
hk(_src)  => 
    hk_c = ohlc4 // hk_close
    hk_o = float(na)
    hk_o := na(hk_o[1]) ? (open + close) / 2 : (nz(hk_o[1]) + nz(hk_c[1])) / 2 // open
    hk_h = math.max(high, math.max(hk_o, hk_c)) // high
    hk_l = math.min(low,  math.min(hk_o, hk_c)) // low
    hk_hl2  = math.avg(hk_h, hk_l) 
    hk_hlc3 = math.avg(hk_h, hk_l, hk_c) 
    hk_ohlc4 = math.avg(hk_o, hk_h, hk_l, hk_c)
    hk_price  = _src == 'close' ? hk_c : _src == 'open' ? hk_o : _src == 'high' ? hk_h : _src == 'low' ? hk_l : _src == 'hl2' ? hk_hl2 : _src == 'hlc3' ? hk_hlc3 : hk_ohlc4  
    math.round(hk_price / syminfo.mintick) * syminfo.mintick  // PineCoders method for aligning Pine prices with chart instrument prices    

// ------------------------------- auto colors ---------------------------------
// auto bear highlight
auto_period_bear_color(str_tf)=>
    _15m = 900
    _1h = 3600  
    _4h = 14400
    _1d = 86400
    _1w = 604800
    this_tf_second = timeframe.in_seconds(str_tf)
    if this_tf_second <= _15m
        color.red
    else if this_tf_second <= _1h
        #66bb6a // lite lime
    else if this_tf_second <= _4h
        color.fuchsia
    else if this_tf_second <= _1d
        color.new(gold_color,0)
    else 
        color.blue

// --------------------- fetch hk candles with tf input ------------------------
fetch_hk_oc(tf,htf)=>
    hikin_open = fetch_tf(this_ticker, tf, hk('open'))
    hikin_close = fetch_tf(this_ticker, tf, hk('close'))
    is_hikin_bull = hikin_open < hikin_close // bool

    htf_hikin_open = fetch_tf(this_ticker, htf, hk('open'))
    htf_hikin_close = fetch_tf(this_ticker, htf, hk('close')) 
    is_htf_hikin_bull = htf_hikin_open < htf_hikin_close // bool

    [is_hikin_bull,is_htf_hikin_bull]

// ---------------------------- generate hk bars -------------------------------
auto_hk_bar(c1,c2,c3)=>
    var color bar_color = na
    var color bar_htf_color = na

    var bool hk_bull = na
    var bool htfhk_bull = na

    var string p1 = na
    var string p2 = na

    simple string s720 = '720' // 12H
    simple string s240 = '240' // 4H
    simple string s180 = '180' // 3H
    simple string s60 = '60' // 1H
    simple string s15 = '15'

    if not auto_trace
        [a,b] = fetch_hk_oc(this_tf,htf_select)
        hk_bull := a
        htfhk_bull := b
        p1 := this_tf
        p2 := htf_select
    else if c1 // g_15m1h
        [a,b] = fetch_hk_oc(s15,s60)
        hk_bull := a
        htfhk_bull := b
        p1 := s15
        p2 := s60
    else if c2 // g_1h4h
        [a,b] = fetch_hk_oc(s60,s240)
        hk_bull := a
        htfhk_bull := b
        p1 := s60
        p2 := s240
    else if c3 // g_3h12h
        [a,b] = fetch_hk_oc(s180,s720)
        hk_bull := a
        htfhk_bull := b
        p1 := s180
        p2 := s720
    else // other sym bol and auto trace
        [a,b] = fetch_hk_oc(s60,s240)
        hk_bull := a
        htfhk_bull := b
        p1 := s60
        p2 := s240

    if not auto_bear_color
        bar_color := hk_bull ? bull_color : bear_color
        bar_htf_color := htfhk_bull ? bull_color : bear_color
    else
        bar_color := hk_bull ? bull_color : auto_period_bear_color(p1)
        bar_htf_color := htfhk_bull ? bull_color : auto_period_bear_color(p2)

    [bar_color,bar_htf_color,p1,p2]

// -----------------------------------------------------------------------------
//                                3 Calculation                                 
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
//                             4 Color Conditions                               
// -----------------------------------------------------------------------------
[b_col, b_htf_col,p1,p2] = auto_hk_bar(is_g1,is_g2,is_g3)
// -----------------------------------------------------------------------------
//                                   5 plot                                     
// -----------------------------------------------------------------------------
var a=1.0
var b=-1.0

// plot Heikin Bars
plot(a,title='Heikin Aishi status',style=plot.style_columns, linewidth=8, color=b_col, histbase=0)
plot(show_htf ? b : na,title='Heikin Aishi HTF status',style=plot.style_columns, linewidth=8, color=b_htf_col, histbase=0)

// -----------------------------------------------------------------------------
//                              6 Debug Section                                 
// -----------------------------------------------------------------------------
var label myLabel1 = na
var label myLabel2 = na

// display status On the chart's last bar
if barstate.islast and show_label

    label_msg = "HK : " + str.tostring(p1)
    myLabel1 := label.new(x=bar_index + 1, y=a/2, color=b_col, style=label.style_label_left, size=size.small, tooltip=label_msg)
    label.set_text(id=myLabel1, text=" ")

    if show_htf
        label_htf_msg = "HK : " + str.tostring(p2)
        myLabel2 := label.new(x=bar_index + 1, y=b/2, color=b_htf_col, style=label.style_label_left, size=size.small, tooltip=label_htf_msg)
        label.set_text(id=myLabel2, text=" ")
else
    myLabel1 := na
    myLabel2 := na

